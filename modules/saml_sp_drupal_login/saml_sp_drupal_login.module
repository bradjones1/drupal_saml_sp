<?php

/**
 * @file
 * SAML Drupal Login
 *
 * Uses the SAML Service Provider module to provide a Drupal-login
 * authentication module.
 */

/**
 * Implements hook_menu().
 */
function saml_sp_drupal_login_menu() {
  $items = array();
  // Admin form to configure which IDP to use.
  $items['admin/config/people/saml_sp/drupal_login'] = array(
    'title' => 'Drupal login',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('saml_sp_drupal_login__admin_config_form'),
    'access arguments' => array('configure saml sp'),
    'file' => 'saml_sp_drupal_login.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  // URL to trigger the authentication process.
  $items['saml/drupal_login'] = array(
    'page callback' => 'saml_sp_drupal_login__start',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function saml_sp_drupal_login_form_user_login_block_alter(&$form, &$form_state) {tdpm(__function__);
  // Add a "Log in using @idp_name" link to the user-login form, which returns
  // the user back to the same page with the returnTo parameter.

  $idp_selection = variable_get('saml_sp_drupal_login__idp', '');
  $idp = saml_sp_idp_load($idp_selection);

  $items = array();
  $options = array('query' => array('returnTo' => current_path()));
  $items[] = array(
    'data' => l(t('Log in using @idp_name', array('@idp_name' => $idp->name)), 'saml/drupal_login', $options),
    'class' => array('saml-link'),
  );

  $form['saml_sp_drupal_login_links'] = array(
    '#theme' => 'item_list',
    '#items' => $items,
    '#attributes' => array('class' => array('saml_sp_drupal_login-links')),
    '#weight' => 1,
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function saml_sp_drupal_login_form_user_login_alter(&$form, &$form_state) {
  $idp_selection = variable_get('saml_sp_drupal_login__idp', '');
  $idp = saml_sp_idp_load($idp_selection);

  global $language;
  // Return user to /user or /sv/user or /en/user
  if (empty($language->prefix)) {
    $query = array('returnTo' => 'user');
  }
  else {
   $query = array('returnTo' => $language->prefix . '/user');
  }
  $options = array('query' => $query);
  // Add a "Log in using @idp_name" link to the user-login form
  $items = array();
  $items[] = array(
    'data' => l(t('Log in using @idp_name', array('@idp_name' => $idp->name)), 'saml/drupal_login', $options),
    'class' => array('saml-link'),
  );

  $form['saml_sp_drupal_login_links'] = array(
    '#theme' => 'item_list',
    '#items' => $items,
    '#attributes' => array('class' => array('saml_sp_drupal_login-links')),
    '#weight' => 1,
  );
}

/**
 * Start the SAML authentication process.
 */
function saml_sp_drupal_login__start() {
  // Load the IDP to authenticate against.
  $idp = saml_sp_drupal_login__get_idp();

  // Start the authentication process; invoke
  // saml_sp_drupal_login__saml_authenticate() when done.
  saml_sp_start($idp, 'saml_sp_drupal_login__saml_authenticate');
}

/**
 * Get the IDP configuration to use for Drupal Login via SAML.
 *
 * @return Object
 */
function saml_sp_drupal_login__get_idp() {
  $idp_machine_name = variable_get('saml_sp_drupal_login__idp', '');
  return saml_sp_idp_load($idp_machine_name);
}

/**
 * SAML authentication callback.
 */
function saml_sp_drupal_login__saml_authenticate($is_valid, OneLogin_Saml2_Response $saml_response) {
  if ($is_valid) {
    $attributes = $saml_response->getAttributes();

    // Default language English
    $language = 'en';
    // If language attribute is set on IdP, then use that language
    if (isset($attributes['language'])) {
      $language = $attributes['language'][0];
    }
    // Load the IDP to authenticate against.
    $idp = saml_sp_drupal_login__get_idp();
    // Get the NameID value from response
    $name_id = $saml_response->getNameId();

    // If email address is not used to identify user,
    // it has to be in the attributes
    if ($idp->nameid_field != 'mail') {
      // Try to get email from SAML response attributes
      try {
        $email = $attributes['mail'][0];
      }
      catch (Exception $e) {
        watchdog('saml_sp', 'No mail attribute available, please check IdP configuration, %exception', array('%exception' => $e));
      }
    }
    else {
      $email = $saml_response->getNameId();
    }
    if ($uid = saml_sp_drupal_login_get_uid($name_id, $idp->nameid_field, $email)) {
      // Existing user, try to login.
      $account = user_load($uid);

      // Update email address if it has changed on IdP
      if ($account->mail != $email) {
        watchdog('saml_sp', 'Updating email address from %old_email to %new_email for UID %uid', array('%old_email' => $account->mail, '%new_email' => $email, '%uid' => $account->uid));
        $wrapper = entity_metadata_wrapper('user', $account);
        $wrapper->mail->set($email);
        $wrapper->save();
        // Showing message for user about the update which happened on IdP
        $message = t('Your email address is now @new_email', array('@new_email' => $email));
        drupal_set_message($message);
      }
      // Update language if it has changed on IdP
      if ($account->language != $language) {
        watchdog('saml_sp', 'Updating language from %old_lang to %new_lang for UID %uid', array('%old_lang' => $account->language, '%new_lang' => $language, '%uid' => $account->uid));
        $wrapper = entity_metadata_wrapper('user', $account);
        $wrapper->language->set($language);
        $wrapper->save();
      }
    }
    else {
      // New user, register.
      $account = NULL;
      $new_user = array(
        'name' => $email,
        'mail' => $email,
        'language' => $language,
        'status' => variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL) == USER_REGISTER_VISITORS,
      );
      $account = user_save($account, $new_user);
      // Store the NameID value from IdP to for the user
      $wrapper = entity_metadata_wrapper('user', $account);
      $wrapper->field_nameid->set($name_id);
      $wrapper->save();
      watchdog('saml_sp', 'New SSO user account for %mail with UID %uid' , array('%mail' => $email, '%uid' => $account->uid));
    }

    // @see user_login_name_validate().
    if (user_is_blocked($account->name)) {
      drupal_set_message(t('The username %name has not been activated or is blocked.', array('%name' => $account->name)));
      return FALSE;
    }

    // Reset any flood control.
    // @see user_login_final_validate().
    if (variable_get('user_failed_login_identifier_uid_only', FALSE)) {
      $identifier = $account->uid;
    }
    else {
      $identifier = $account->uid . '-' . ip_address();
    }
    flood_clear_event('failed_login_attempt_user', $identifier);

    // @see user_login_submit().
    global $user;
    $user = user_load($account->uid);

    $edit = array();
    // Adding redirect path to where user started the login from
    $edit['redirect'] = $_POST['RelayState'];
    user_login_finalize($edit);
  }
  drupal_goto();
}

/**
 * Get the uid from either users table or custom field. Custom field should be
 * used if the users need to be able to change the email address on IdP,
 * because then it cannot be used for identifying a user.
 * Email address can be used as a backup method if user is singing in for the
 * first time and their NameID value has not been stored to the given field yet.
 *
 * @param String $name_id
 * The NameID value which SSO server provides in SAML response.
 *
 * @param String $field_name
 * The name of the field in Drupal where NameID is stored.
 *
 * @param String $email
 * User email address which is only used if NameID cannot be found.
 *
 * @return String $uid
 * The user ID in Drupal which matches the NameID or email address. FALSE if it
 * cannot be found.
 */
function saml_sp_drupal_login_get_uid($name_id, $field_name, $email = NULL) {
  if ($field_name == 'mail') {
    return db_query("SELECT uid FROM {users} WHERE mail = :mail", array(
      ':mail' => $name_id,
    ))->fetchField();
  }
  else {
    // Find the uid from the field where it is supposed to be stored
    $db_field = 'field_data_' . $field_name;
    $column = $field_name . '_value';
    $uid = db_select($db_field, 'nameid')
      ->fields('nameid', array('entity_id'))
      ->condition($column, $name_id, '=')
      ->execute()
      ->fetchField();

    // If uid is not found, try to find it from the users table with the email.
    // This might be the case if existing users are exported to new IdP,
    // then they will not have ID from IdP on their first login.
    if (empty($uid)) {
      $uid = db_query("SELECT uid FROM {users} WHERE mail = :mail", array(
      ':mail' => $email,
      ))->fetchField();
      if (!empty($uid)) {
          $user = user_load($uid);
          $wrapper = entity_metadata_wrapper('user', $user);
          $wrapper->field_nameid->set($name_id);
          $wrapper->save();
      }
      else {
        return FALSE;
      }
    }
    return $uid;
  }
}
