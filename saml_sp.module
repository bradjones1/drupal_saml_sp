<?php
/**
 * @file
 * SAML Service Provider
 *
 * Allow users to log in to Drupal via a third-party SAML Identity Provider.
 * Users authenticate to the third-party SAML IDP (e.g. http://idp.example.com)
 * and a series of redirects allows that authentication to be recognised in
 * Drupal.
 *
 * Uses the OneLogin PHP-SAML toolkit: https://github.com/onelogin/php-saml
 */

// Path to this directory. Requires PHP 5.3 or greater.
define('DRUPAL_SAML_SP__HOME', __DIR__);

// Default name to identify this application to IDPs.
define('DRUPAL_SAML_SP__APP_NAME_DEFAULT', 'drupal-saml-sp');

/**
 * Implements hook_theme().
 */
function saml_sp_theme() {
  return array(
    'saml_sp__idp_list' => array(
      'render element' => 'idps',
      'file' => 'saml_sp.theme.inc',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function saml_sp_permission() {
  return array(
    'configure saml sp' => array(
      'title' => t('Configure SAML SP'), 
      'description' => t('Configure the SAML Service Provider integration.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function saml_sp_menu() {
  $items = array();

  $items['admin/config/people/saml_sp'] = array(
    'title' => 'SAML Service Providers',
    'page callback' => 'saml_sp__admin_overview',
    'access arguments' => array('configure saml sp'),
    'file' => 'saml_sp.admin.inc',
  );
  $items['admin/config/people/saml_sp/IDP'] = array(
    'title' => 'Identiy Providers',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Add a new IDP.
  $items['admin/config/people/saml_sp/IDP/add'] = array(
    'title' => 'Add SAML IDP',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('saml_sp__configure_idp_form'),
    'access arguments' => array('configure saml sp'),
    'file' => 'saml_sp.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  // Configure an existing IDP.
  $items['admin/config/people/saml_sp/IDP/%saml_sp_idp'] = array(
    'title' => 'SAML IDP: @idp_name',
    'title callback' => 'saml_sp__menu_title',
    'title arguments' => array('SAML IDP: @idp_name', 5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('saml_sp__configure_idp_form', 5),
    'access arguments' => array('configure saml sp'),
    'file' => 'saml_sp.admin.inc',
  );
  // Confirmation form to delete an IDP.
  $items['admin/config/people/saml_sp/IDP/%saml_sp_idp/delete'] = array(
    'title' => 'Delete SAML IDP: @idp_name',
    'title callback' => 'saml_sp__menu_title',
    'title arguments' => array('Delete SAML IDP: @idp_name', 5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('saml_sp__delete_idp_form', 5),
    'access arguments' => array('configure saml sp'),
    'file' => 'saml_sp.admin.inc',
  );
  // Export the IDP configuration to code.
  $items['admin/config/people/saml_sp/IDP/%saml_sp_idp/export'] = array(
    'title' => 'Export SAML IDP: @idp_name',
    'title callback' => 'saml_sp__menu_title',
    'title arguments' => array('Export SAML IDP: @idp_name', 5),
    'page callback' => 'saml_sp__export_idp',
    'page arguments' => array(5),
    'access arguments' => array('configure saml sp'),
    'file' => 'saml_sp.admin.inc',
  );



  // Default SAML endpoint/
  // Once identity-negotation is complete, the IDP will redirect the user to
  // this page; Drupal and the SAML component will check the response to
  // validate the data, and invoke the action to respond with authentication
  // data.
  // This URL does not provide any (human-readable) output.
  $items['saml/consume'] = array(
    'title' => 'Default SAML endpoint',
    'page callback' => 'saml_sp__endpoint',
    // This endpoint should not be under access control.
    'access callback' => TRUE,
    'file' => 'saml_sp.pages.inc',
    'type' => MENU_CALLBACK,
  );


  return $items;
}

/**
 * Title callback for SAML SP menu items.
 */
function saml_sp__menu_title($title, $idp) {
  return t($title, array('@idp_name' => $idp->name));
}


/******************************************************************************
 * CRUD handlers.
 *****************************************************************************/


/**
 * Load a single IDP.
 * Also a menu argument loader.
 *
 * @param String $idp_machine_name
 *
 * @return Object
 */
function saml_sp_idp_load($idp_machine_name) {
  $all_idps = saml_sp__load_all_idps();
  return (isset($all_idps[$idp_machine_name]) ? $all_idps[$idp_machine_name] : FALSE);
}

/**
 * Save an IDP configuration.
 *
 * @param Object $idp
 * A populated IDP object, with the keys:
 * - name
 * - machine_name
 * - app_name
 * - login_url
 * - x509_cert
 *
 * @return Int
 * One of:
 * - SAVED_NEW
 * - SAVED_UPDATED
 */
function saml_sp_idp_save($idp) {
  // Prevent PHP notices by ensure 'export_type' is populated.
  if (empty($idp->export_type)) {
    $idp->export_type = NULL;
  }

  // Handle changes of machine name (if which case $idp->orig_machine_name
  // should be populated).
  if (!empty($idp->orig_machine_name)) {
    saml_sp_idp_delete($idp->orig_machine_name);
    $idp->export_type = NULL;
  }

  // Delegate to the CTools CRUD handler.
  $result = ctools_export_crud_save('saml_sp_idps', $idp);
  return (isset($idp->orig_machine_name) && $result == SAVED_NEW) ? SAVED_UPDATED : $result;
}

/**
 * Delete an IDP.
 *
 * @param String $idp_machine_name
 */
function saml_sp_idp_delete($idp_machine_name) {
  // No success feedback is provided.
  ctools_export_crud_delete('saml_sp_idps', $idp_machine_name);
}

/**
 * Load all the registered IDPs.
 *
 * @return Array
 * An array of IDP objects, keyed by the machine name.
 */
function saml_sp__load_all_idps() {
  // Use CTools export API to fetch all presets.
  ctools_include('export');
  $result = ctools_export_crud_load_all('saml_sp_idps');
  return $result;
}



/******************************************************************************
 * API library integration.
 *****************************************************************************/


/**
 * Get the SAML settings for an IDP.
 *
 * @param Object $idp
 * An IDP object, such as that provided by saml_sp_idp_load($machine_name).
 *
 * @return OneLogin_Saml_Settings
 * IDP Settings data.
 */
function saml_sp__get_settings($idp, $endpoint = NULL) {
  // Require all the relevant libraries.
  _saml_sp__prepare();


  if (is_null($endpoint)) {
    $endpoint = saml_sp__get_endpoint();
  }

  $settings = new OneLogin_Saml_Settings();

  // URL of the IDP server.
  $settings->idpSingleSignOnUrl = $idp->login_url;

  // The IDP's public x.509 certificate.
  $settings->idpPublicCertificate = $idp->x509_cert;

  // Name to identify this application
  $settings->spIssuer = $idp->app_name;


  // Drupal URL to consume the response from the IDP.
  $settings->spReturnUrl = $endpoint;

  // Tells the IdP to return the email address of the current user
  $settings->requestedNameIdFormat = OneLogin_Saml_Settings::NAMEID_EMAIL_ADDRESS;


  // Invoke hook_saml_sp_settings_alter().
  drupal_alter('saml_sp_settings', $settings);

  return $settings;
}


/******************************************************************************
 * Start and finish SAML authentication process.
 *****************************************************************************/


/**
 * Get the default SAML endpoint available.
 *
 * @return String
 * A fully-qualified domain name, for the SAML consumer, which receives data
 * from the IDP and validates it to authenticate a user.
 */
function saml_sp__get_endpoint() {
  return url('saml/consumer', array('absolute' => TRUE));
}

/**
 * Start a SAML authentication request.
 *
 * @param Object $idp
 */
function saml_sp_start($idp) {
  $settings = saml_sp__get_settings($idp);

  $authRequest = new OneLogin_Saml_AuthRequest($settings);
  $url = $authRequest->getRedirectUrl();

  // Redirect the user to the IDP.
  header("Location: $url");
}



/******************************************************************************
 * Internal helper functions.
 *****************************************************************************/


/**
 * Get a default IDP object.
 */
function _saml_sp__default_idp() {
  return (object) array(
    'name' => '',
    'machine_name' => '',
    // If the app-name is NULL, the global app-name will be used instead.
    'app_name' => NULL,
    'login_url' => '',
    'x509_cert' => '',
  );
}

/**
 * Load the required OneLogin SAML-PHP toolkit files.
 */
function _saml_sp__prepare() {
  static $has_run = FALSE;
  if (!$has_run) {
    require_once DRUPAL_SAML_SP__HOME . '/lib/ext/xmlseclibs/xmlseclibs.php';
    require_once DRUPAL_SAML_SP__HOME . '/lib/src/OneLogin/Saml/AuthRequest.php';
    require_once DRUPAL_SAML_SP__HOME . '/lib/src/OneLogin/Saml/Response.php';
    require_once DRUPAL_SAML_SP__HOME . '/lib/src/OneLogin/Saml/Settings.php';
    require_once DRUPAL_SAML_SP__HOME . '/lib/src/OneLogin/Saml/XmlSec.php';

    $has_run = TRUE;
  }
}

